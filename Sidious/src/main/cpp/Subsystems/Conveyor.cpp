// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Conveyor.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ConveyorRest.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Conveyor::Conveyor() : frc::Subsystem("Conveyor") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
conveyorMotor.reset(new WPI_TalonSRX(7));


conveyorPiston.reset(new frc::DoubleSolenoid(1, 2, 3));
AddChild("ConveyorPiston", conveyorPiston);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

     conveyorMotor->ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor);

     conveyorMotor->SetNeutralMode(NeutralMode::Brake);

     conveyorMotor->Config_kF(0, kF, mTimeout);
     conveyorMotor->Config_kP(0, kP, mTimeout);
     conveyorMotor->Config_kI(0, kI, mTimeout);
     conveyorMotor->Config_kD(0, kD, mTimeout);

}

void Conveyor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ConveyorRest());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Conveyor::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Conveyor::ConveyorRun(double conveyorSpeed)
{
     conveyorMotor->Set(ControlMode::Velocity, conveyorSpeed);
}

void Conveyor::ConveyorPistonIn()
{
    conveyorPiston->Set(frc::DoubleSolenoid::kReverse);
}

void Conveyor::ConveyorPistonOut()
{
    conveyorPiston->Set(frc::DoubleSolenoid::kForward);
}
