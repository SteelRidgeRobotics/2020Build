// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Climber.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ClimberWinchStop.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Climber::Climber() : frc::Subsystem("Climber") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
climberMotor.reset(new frc::VictorSP(2));
AddChild("ClimberMotor", std::static_pointer_cast<frc::VictorSP>(climberMotor));

leftClimberSolenoid.reset(new frc::DoubleSolenoid(0, 6, 7));
AddChild("LeftClimberSolenoid", leftClimberSolenoid);

rightClimberSolenoid.reset(new frc::DoubleSolenoid(1, 0, 1));
AddChild("RightClimberSolenoid", rightClimberSolenoid);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Climber::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ClimberWinchStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Climber::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Climber::PistonsOut()
{
    leftClimberSolenoid->Set(frc::DoubleSolenoid::kForward);
    rightClimberSolenoid->Set(frc::DoubleSolenoid::kForward);
}

void Climber::PistonsIn()
{
    leftClimberSolenoid->Set(frc::DoubleSolenoid::kReverse);
    rightClimberSolenoid->Set(frc::DoubleSolenoid::kReverse);
}

void Climber::WinchForward()
{
    climberMotor->Set(0.2);

}

void Climber::WinchBackward()
{
    climberMotor->Set(-0.2);
}

void Climber::WinchStop()
{
    climberMotor->Set(0.0);
}

