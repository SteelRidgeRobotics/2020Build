// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Intake.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : frc::Subsystem("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
intakeMotor.reset(new frc::VictorSP(0));
AddChild("IntakeMotor", std::static_pointer_cast<frc::VictorSP>(intakeMotor));

leftIntakeSolenoid.reset(new frc::DoubleSolenoid(0, 0, 1));
AddChild("LeftIntakeSolenoid", leftIntakeSolenoid);

rightIntakeSolenoid.reset(new frc::DoubleSolenoid(0, 2, 3));
AddChild("RightIntakeSolenoid", rightIntakeSolenoid);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Intake::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Intake::intakeDown()
{
    leftIntakeSolenoid->Set(frc::DoubleSolenoid::kForward);
    rightIntakeSolenoid->Set(frc::DoubleSolenoid::kForward);

}

void Intake::intakeUp()
{
    leftIntakeSolenoid->Set(frc::DoubleSolenoid::kReverse);
    rightIntakeSolenoid->Set(frc::DoubleSolenoid::kReverse);


}

void Intake::intakeStop()
{
    intakeMotor->Set(0.0);

}
void Intake::intakeRun()
{
    intakeMotor->Set(intakeSpeed);

}