// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutoTimedCommand.h"
#include "Commands/AutonomousCommandGroup.h"
#include "Commands/ClimberWinchRun.h"
#include "Commands/ConveyorOverride.h"
#include "Commands/ConveyorPistonControl.h"
#include "Commands/ConveyorRun.h"
#include "Commands/DriveWithJoystick.h"
#include "Commands/EncoderDrive.h"
#include "Commands/IntakeDownSequence.h"
#include "Commands/IntakePistonControl.h"
#include "Commands/IntakeRun.h"
#include "Commands/IntakeUpSequence.h"
#include "Commands/LimelightOff.h"
#include "Commands/LimelightTrack.h"
#include "Commands/SetVelocityWithLimelight.h"
#include "Commands/ShootSequence.h"
#include "Commands/ShooterRun.h"
#include "Commands/TimedConveyor.h"
#include "Commands/TimedShooter.h"
#include "Commands/autoConveyor.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
systemsController.reset(new frc::Joystick(1));

sc_Y.reset(new frc::JoystickButton(systemsController.get(), 4));
sc_Y->WhileHeld(new IntakeRun(-0.5));
sc_X.reset(new frc::JoystickButton(systemsController.get(), 3));
sc_X->WhileHeld(new ClimberWinchRun(0.333333333));
sc_A.reset(new frc::JoystickButton(systemsController.get(), 1));
sc_A->WhileHeld(new IntakeDownSequence());
driveController.reset(new frc::Joystick(0));

mc_X.reset(new frc::JoystickButton(driveController.get(), 3));
mc_X->WhileHeld(new SetVelocityWithLimelight());
mc_A.reset(new frc::JoystickButton(driveController.get(), 1));
mc_A->WhileHeld(new LimelightTrack());

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("LimelightOff", new LimelightOff());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriveController() {
   return driveController;
}

std::shared_ptr<frc::Joystick> OI::getSystemsController() {
   return systemsController;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
