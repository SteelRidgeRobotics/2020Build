// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Conveyor.h"

#include "frc/Joystick.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Conveyor::Conveyor() : frc::Subsystem("Conveyor") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
conveyorMotor.reset(new WPI_VictorSPX(4));


conveyorSolenoid.reset(new frc::DoubleSolenoid(0, 0, 7));
AddChild("ConveyorSolenoid", conveyorSolenoid);

conveyorPhotogateSensor.reset(new frc::DigitalInput(0));
AddChild("ConveyorPhotogateSensor", conveyorPhotogateSensor);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

//we have set neutral mode brake in the originial, but its a victor spx so i dont know if it has that capibility. leaving it out for now

}

void Conveyor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Conveyor::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Conveyor::ConveyorRun(double conveyorSpeed){
    conveyorMotor->Set(conveyorSpeed);
}

void Conveyor::ConveyorRunWithJoysticks(std::shared_ptr<frc::Joystick> systemsController){
    double leftTrigger = -1* systemsController->GetRawAxis(2);
    double rightTrigger = 1* systemsController->GetRawAxis(3);
    double output;
    double modifier = 0.3;

    if(fabs(leftTrigger) > 0.1) output = leftTrigger * modifier;

    else if(fabs(rightTrigger) > 0.1) output = rightTrigger * modifier;

    else output = 0.0;

    conveyorMotor->Set(output);
}
