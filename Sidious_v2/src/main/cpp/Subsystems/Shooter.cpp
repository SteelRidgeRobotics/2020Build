// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Shooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ShooterRun.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : frc::Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
shooterFalcon.reset(new WPI_TalonFX(6));



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    shooterFalcon->ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor);

    shooterFalcon->SetNeutralMode(NeutralMode::Brake);
    shooterFalcon->SetInverted(true);

    shooterFalcon->Config_kF(0, kF, kTimeout);
    shooterFalcon->Config_kP(0, kP, kTimeout);
    shooterFalcon->Config_kI(0, kI, kTimeout);
    shooterFalcon->Config_kD(0, kD, kTimeout);

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ShooterRun(0.0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::runShooterAtVelocity(double velocity){
    if(velocity > 0.0){
        shooterFalcon->Set(ControlMode::Velocity, velocityToTicks(velocity));
        sendDataToSD();
    }

    else shooterFalcon->Set(ControlMode::PercentOutput, 0.0);
}


double Shooter::velocityToTicks(double velocity){
    double _ticks;
   _ticks = velocity * sensorTPR * kGearRatio / 600.0; //This will be in Pulses per 100 ms.
    return _ticks;
}

double Shooter::ticksToVelocity(double ticks){
    double _velocity;
    _velocity = ticks / kGearRatio / sensorTPR * 600.0; //This will be in RPM
    return _velocity;
}

void Shooter::sendDataToSD(){
    double v_data = shooterFalcon->GetSelectedSensorVelocity();
    v_data = ticksToVelocity(v_data);
    frc::SmartDashboard::PutNumber("Shooter_Velocity", v_data);
}
