// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Drivetrain.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/DriveWithJoystick.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : frc::Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
frontLeft.reset(new WPI_TalonSRX(0));


backLeft.reset(new WPI_TalonSRX(1));


frontRight.reset(new WPI_TalonSRX(2));


backRight.reset(new WPI_TalonSRX(3));



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    backLeft->Follow(*frontLeft); //left back to follow left front
    backRight->Follow(*frontRight); //right back to follow right front


    frontLeft->SetSensorPhase(true); //Reverse sensors
    frontRight->SetSensorPhase(true); //Reverse sensors

    backRight->SetInverted(true); //Reverse motor and slave for right side of robot.
    frontRight->SetInverted(true);

    frontLeft->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, kTimeoutMs);
    frontRight->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, kTimeoutMs);

     /*
      * Set Neutral modes to brake
      */


    frontRight->SetNeutralMode(NeutralMode::Brake);
    backRight->SetNeutralMode(NeutralMode::Brake);
    frontLeft->SetNeutralMode(NeutralMode::Brake);
    backLeft->SetNeutralMode(NeutralMode::Brake);

}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


}

void Drivetrain::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::userDrive(std::shared_ptr<frc::Joystick>drivecontroller)
{


	double left_y = -1*drivecontroller->GetRawAxis(1);
	double right_y = -1*drivecontroller->GetRawAxis(5);
	if(fabs(left_y) < 0.1) {
		left_y = 0;
	}

	if(fabs(right_y) < 0.1) {
		right_y = 0;
	}

	int l_bump = drivecontroller->GetRawButton(5);

	if(l_bump == 1) {
		left_y = -0.6*drivecontroller->GetRawAxis(1);
		right_y = -0.6*drivecontroller->GetRawAxis(5);
	}

	frontLeft->Set(ControlMode::PercentOutput, left_y);
	frontRight->Set(ControlMode::PercentOutput, right_y);

    frc::SmartDashboard::PutNumber("Left Encoder", getEncoderRotations(0));
    frc::SmartDashboard::PutNumber("Light Encoder", getEncoderRotations(1));
}

double Drivetrain::getEncoderRotations(int encoder)
{
    if (encoder == 0)
    {
        return frontLeft->GetSelectedSensorPosition(0);
    }

    if (encoder == 1)
    {
        return frontRight->GetSelectedSensorPosition(0);
    }

    else {return 0;}
    
}

void Drivetrain::encoderReset()
{
    frontLeft->SetSelectedSensorPosition(0, 0, kTimeoutMs);
    frontRight->SetSelectedSensorPosition(0, 0, kTimeoutMs);
}
