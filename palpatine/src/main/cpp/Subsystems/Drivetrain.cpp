// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Drivetrain.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/DriveWithJoysticks.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : frc::Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
frontLeft.reset(new frc::VictorSP(0));
AddChild("frontLeft", std::static_pointer_cast<frc::VictorSP>(frontLeft));

backLeft.reset(new frc::VictorSP(1));
AddChild("backLeft", std::static_pointer_cast<frc::VictorSP>(backLeft));

frontRight.reset(new frc::VictorSP(2));
AddChild("frontRight", std::static_pointer_cast<frc::VictorSP>(frontRight));

backRight.reset(new frc::VictorSP(3));
AddChild("backRight", std::static_pointer_cast<frc::VictorSP>(backRight));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Drivetrain::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::userDrive(std::shared_ptr<frc::Joystick>driveController)
{
    double leftY = driveController->GetRawAxis(1) * -1;
    double rightY = driveController->GetRawAxis(5) * -1;
    int leftBump = driveController->GetRawButton(5);
    double slow;

    if(leftBump > 0) {slow = 0.5;} else {slow = 1;}

    if(leftY > 0.1 || leftY < -0.1)
    {
        frontLeft->Set(leftY*slow);
        backLeft->Set(leftY*slow);
    }

    else
    {
    frontLeft->Set(0.0);
    backLeft->Set(0.0);
    }

    if(rightY > 0.1 || rightY < -0.1)
    { 
        frontRight->Set((rightY*slow)*-1);
        backRight->Set((rightY*slow)*-1);
    }
    else
    {
        frontRight->Set(0.0);
        backRight->Set(0.0);
    }


}