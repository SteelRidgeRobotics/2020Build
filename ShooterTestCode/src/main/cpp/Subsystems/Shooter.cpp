// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Shooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : frc::Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
leftShooterMotor.reset(new WPI_TalonFX(4));


rightShooterMotor.reset(new WPI_TalonFX(5));



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    rightShooterMotor->Follow(*leftShooterMotor);
    rightShooterMotor->SetInverted(true);
    leftShooterMotor->Config_kF(0, 1.06, 50);
    leftShooterMotor->ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, 50);
    rightShooterMotor->ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, 50);
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::Periodic() {
    // Put code here to be run every loop


}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.


void Shooter::ShooterRun(double velocity)
{

    while(LJoyIsActive)
    {
        
    }

    leftShooterMotor->Set(ControlMode::Velocity, velocity);
}

void Shooter::ShooterManual(std::shared_ptr<frc::Joystick>MainController)
{

    double leftY = MainController->GetRawAxis(1) * -1;

    leftShooterMotor->Set(ControlMode::PercentOutput, leftY);

}

void Shooter::ShooterStop()
{

    leftShooterMotor->Set(ControlMode::PercentOutput, 0.0);

}

void Shooter::SendEncoderData()
{
    frc::SmartDashboard::PutNumber("Left Encoder Pos", leftShooterMotor->GetSelectedSensorPosition());
    frc::SmartDashboard::PutNumber("Right Encoder Pos", rightShooterMotor->GetSelectedSensorPosition());
}

bool Shooter::LJoyIsActive(std::shared_ptr<frc::Joystick>MainController)
{

    double leftY = MainController->GetRawAxis(1) * -1;

    if(leftY > 0.1)
    {
        return true;
    }

    else 
    {
        return false;
    }
}

